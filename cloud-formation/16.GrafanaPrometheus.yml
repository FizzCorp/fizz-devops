AWSTemplateFormatVersion: "2010-09-09"  
Parameters: 
  KeyPair: 
    Description: Please select name of an existing ec2 KeyPair to enable SSH access to the instance
    Type: "AWS::EC2::KeyPair::KeyName"
    ConstraintDescription: must be the name of an existing EC2 KeyPair. 
  HbaseCluster: 
    Description: Please enter hbase master node private ip
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})'
    ConstraintDescription: must be a valid IP range of the form x.x.x.x.
  ComponentsSG:
    Description: Please select fizz components security group
    Type: AWS::EC2::SecurityGroup::GroupName
  EmqxSG:
    Description: Please select fizz emqx service security group
    Type: AWS::EC2::SecurityGroup::GroupName
Mappings:
  AWSRegionAMI:
    us-east-1:
      AMI: ami-0b69ea66ff7391e80
    us-west-1:
      AMI: ami-0245d318c6788de52
Resources:  
  GrafanaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: fizz grafana security group
      GroupName: !Sub '${AWS::StackName}-fizz-grafana-prometheus-sg'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-fizz-grafana-prometheus-sg'
      SecurityGroupIngress: 
        -   CidrIp: 0.0.0.0/0
            FromPort: 3000
            IpProtocol: TCP
            ToPort: 3000
        -   CidrIp: 0.0.0.0/0
            FromPort: 9090
            IpProtocol: TCP
            ToPort: 9090  
  EmqxSgIngressGrafana:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupName: !Ref EmqxSG
      IpProtocol: -1
      SourceSecurityGroupId: !GetAtt 
        - GrafanaSecurityGroup
        - GroupId
      Description: fizz grafana prometheus sg
  GrafanaRole:
    Type: 'AWS::IAM::Role'
    Description: Fizz grafana prometheus role
    Properties:
      RoleName: !Sub '${AWS::StackName}-fizz-grafana-prometheus-role'
      Description: Fizz grafana prometheus role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - ec2.amazonaws.com
            Action: 
                - 'sts:AssumeRole'
      Path: /
      Policies: 
      - PolicyName: !Sub ${AWS::StackName}-fizz-grafana-prometheus-policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Sid: AllowReadingMetricsFromCloudWatch
              Effect: Allow
              Action:
                - 'cloudwatch:DescribeAlarmsForMetric'
                - 'cloudwatch:DescribeAlarmHistory'
                - 'cloudwatch:DescribeAlarms'
                - 'cloudwatch:ListMetrics'
                - 'cloudwatch:GetMetricStatistics'
                - 'cloudwatch:GetMetricData'
              Resource: '*'
            - Sid: AllowReadingLogsFromCloudWatch
              Effect: Allow
              Action:
                - 'logs:DescribeLogGroups'
                - 'logs:GetLogGroupFields'
                - 'logs:StartQuery'
                - 'logs:StopQuery'
                - 'logs:GetQueryResults'
                - 'logs:GetLogEvents'
              Resource: '*'
            - Sid: AllowReadingTagsInstancesRegionsFromEC2
              Effect: Allow
              Action:
                - 'ec2:DescribeTags'
                - 'ec2:DescribeInstances'
                - 'ec2:DescribeRegions'
              Resource: '*'
            - Sid: AllowReadingResourcesForTags
              Effect: Allow
              Action: 'tag:GetResources'
              Resource: '*'
      - PolicyName: !Sub ${AWS::StackName}-fizz-assume-role-grafana-role
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - sts:AssumeRole
              Resource:
                - !Sub "arn:*:iam::*:role/${AWS::StackName}-fizz-grafana-prometheus-role"
  GrafanaInstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      InstanceProfileName: !Sub '${AWS::StackName}-fizz-grafana-prometheus-profile'
      Path: "/"
      Roles: 
        - !Ref GrafanaRole
  GrafanaInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.medium
      ImageId: !FindInMap
        - AWSRegionAMI
        - !Ref 'AWS::Region'
        - AMI
      KeyName: !Ref KeyPair
      IamInstanceProfile: !Ref GrafanaInstanceProfile
      SecurityGroups:
        - !Ref GrafanaSecurityGroup
        - !Ref ComponentsSG
      Tags:
        -
          Key: Name
          Value: !Sub ${AWS::StackName}-fizz-grafana-prometheus
      UserData:
        Fn::Base64: 
          Fn::Sub: 
          -   |
              #!/bin/bash -e
              yum update -y
              #install Grafana
              sudo echo "[grafana]
              name=grafana
              baseurl=https://packages.grafana.com/oss/rpm
              AWS_SDK_LOAD_CONFIG=1
              repo_gpgcheck=1
              enabled=1
              gpgcheck=1
              gpgkey=https://packages.grafana.com/gpg.key
              sslverify=1
              sslcacert=/etc/pki/tls/certs/ca-bundle.crt" > /etc/yum.repos.d/grafana.repo
              sudo yum install -y grafana 
              sudo grafana-cli plugins install praj-ams-datasource
              sudo echo "
              apiVersion: 1

              datasources:
                - name: CloudWatch
                  type: cloudwatch
                  jsonData:
                    authType: default
                    assumeRoleArn: ${GrafanaRole.Arn}
                    defaultRegion: ${AWS::Region}
                  editable: true

                - name: Ambari Metrics
                  type: praj-ams-datasource
                  access: proxy
                  url: http://${HbaseCluster}:6188
                  basicAuth: true
                  basicAuthUser: admin
                  basicAuthPassword: Caramel99
                  isDefault: true
                  editable: true

                - name: Prometheus
                  type: prometheus
                  access: proxy
                  url: http://${PUBLIC_IP}:9090
                  editable: true " | tee /etc/grafana/provisioning/datasources/Mydatasources.yaml

              sudo service grafana-server start
              #install Prometheus
              sudo wget https://github.com/prometheus/prometheus/releases/download/v2.8.1/prometheus-2.8.1.linux-amd64.tar.gz
              sudo useradd --no-create-home --shell /bin/false prometheus
              sudo mkdir /etc/prometheus
              sudo mkdir /var/lib/prometheus
              sudo chown prometheus:prometheus /etc/prometheus
              sudo chown prometheus:prometheus /var/lib/prometheus
              sudo tar -xvzf prometheus-2.8.1.linux-amd64.tar.gz
              sudo mv prometheus-2.8.1.linux-amd64 prometheuspackage
              sudo cp prometheuspackage/prometheus /usr/local/bin/
              sudo cp prometheuspackage/promtool /usr/local/bin/
              sudo chown prometheus:prometheus /usr/local/bin/prometheus
              sudo chown prometheus:prometheus /usr/local/bin/promtool
              sudo cp -r prometheuspackage/consoles /etc/prometheus
              sudo cp -r prometheuspackage/console_libraries /etc/prometheus
              sudo chown -R prometheus:prometheus /etc/prometheus/consoles
              sudo chown -R prometheus:prometheus /etc/prometheus/console_libraries

              sudo echo "global:
                scrape_interval: 60s

              scrape_configs:
                - job_name: 'prometheus_master'
                  scrape_interval: 5s
                  static_configs:
                    - targets: ['localhost:9090']
                - job_name: 'emqx_metrics'
                  metrics_path: /metrics
                  scrape_interval: 15s
                  scheme: http
                  ec2_sd_configs:
                    - region: ${AWS::Region}
                      port: 9000
                  relabel_configs:
                    - source_labels: [__meta_ec2_tag_Name]
                      regex: emqx-cluster.*
                      action: keep
                    - source_labels: [__meta_ec2_instance_id]
                      target_label: instance 
                - job_name: 'cloudwatch-exporter'
                  scrape_interval: 15s
                  static_configs:
                    - targets: ['localhost:9106'] " | tee /etc/prometheus/prometheus.yml

              sudo chown prometheus:prometheus /etc/prometheus/prometheus.yml

              sudo echo "[Unit]
              Description=Prometheus
              Wants=network-online.target
              After=network-online.target

              [Service]
              User=prometheus
              Group=prometheus
              Type=simple
              ExecStart=/usr/local/bin/prometheus \
              --config.file /etc/prometheus/prometheus.yml \
              --storage.tsdb.path /var/lib/prometheus/ \
              --web.console.templates=/etc/prometheus/consoles \
              --web.console.libraries=/etc/prometheus/console_libraries

              [Install]
              WantedBy=multi-user.target" | tee /etc/systemd/system/prometheus.service

              sudo systemctl daemon-reload
              sudo systemctl start prometheus
              sudo mkdir /tmp/config
              sudo echo "
              region: us-east-1
              metrics:
                - aws_namespace: AWS/EC2
                  aws_metric_name: CPUUtilization
                  aws_dimensions: [InstanceId]
                  aws_tag_select:
                    tag_selections:
                      aws:autoscaling:groupName : ['emqx-cluster-green']
                    resource_type_selection: 'ec2:instance'
                    resource_id_dimension: InstanceId
                  aws_statistics: [Maximum] 
                - aws_namespace: AWS/EC2
                  aws_metric_name: CPUUtilization
                  aws_dimensions: [InstanceId]
                  aws_tag_select:
                    tag_selections:
                      aws:autoscaling:groupName : [emqx-cluster-blue]
                    resource_type_selection: "ec2:instance"
                    resource_id_dimension: InstanceId
                  aws_statistics: [Maximum]" | tee /tmp/config/config.yml
              sudo yum install docker -y
              sudo systemctl start docker
              docker run -p 9106:9106 -v /tmp/config/config.yml:/config/config.yml prom/cloudwatch-exporter /config/config.yml


          - PUBLIC_IP: $(curl -s http://instance-data/latest/meta-data/public-ipv4)

